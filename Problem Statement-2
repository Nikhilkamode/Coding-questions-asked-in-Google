/*Problem Statement */
Ravi discovered that some strings read the same forwards and backwards, which are called palindromes.

He noticed that every string he encountered has at least one palindromic substring. He wants to know how to find the longest palindromic substring in a given string.

Can you help him determine the length of this longest palindromic substring?

/*Input Format*/
The first line contains n the length of the string
The following line has s, the input string

/*Output Format*/
Print the length of the longest palindromic substring that is possible.

Constraints
1<=n<=1000
Sample Testcase 0
Testcase Input
5 
abacc
Testcase Output
3
Explanation
The given string is abacc The possible palindromic substrings present are ‘a’, ‘b,’ ‘c,’ ‘aba,’ ‘cc,’ and the longest substring is ‘aba’ of length 3.

Sample Testcase 1
Testcase Input
6
abcdef
Testcase Output
1
Explanation
The given string is abcdef The possible palindromic substrings are ‘a’, ‘b,’ ‘c,’ ‘’d, ‘e,’ ‘f.’ The length of the longest palindromic substring is 1

/*ans is given below*/
for i in range(n):
        dp[i][i] = True

    start = 0  # Start index of the longest palindromic substring

    # Check for palindromes of length 2
    for i in range(n - 1):
        if s[i] == s[i + 1]:
            dp[i][i + 1] = True
            max_length = 2
            start = i

    # Check for palindromes of length 3 or more
    for length in range(3, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                if length > max_length:
                    max_length = length
                    start = i

    return max_length
