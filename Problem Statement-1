/*Problem Statement */
Rahul has an integer array called 'arr' containing unique values. He wants to create a balanced tree where each parent node has smaller valued nodes on its left and larger valued nodes on its right. This balanced tree should ensure that the depth of the two subtrees for every node doesn't differ by more than one.

Can you assist him in creating this type of tree?

/*Input Format*/
First-line contains an integer n representing the size of the array
Next line contains n  integer array containing n elements

/*Output Format*/
 The output contains n lines denoting the pre-order traversal of nodes. 
If the left child of the node contains not null value then print the value else print a dot(.) , a similar process for the right child also. Each right child value is separated from the node by “->” sign and each left child by a left arrow sign

/*Constraints*/
1<= arr.length <= 10^5
1 <= arr[i] <= 10^9

/*Sample Testcase 0*/
Testcase Input
9
1 3 2 4 5 7 6 8 9
Testcase Output
3 <- 5 -> 8
2 <- 3 -> 4
1 <- 2 -> .
. <- 1 -> .
. <- 4 -> .
7 <- 8 -> 9
6 <- 7 -> .
. <- 6 -> .
. <- 9 -> .

/*Explanation*/
 Clearly, this is the  height-balanced tree which is formed by traversing the given array, such that all the left nodes are less than the parent node and all the right  nodes are greater than the parent node.

/*Using cpp*/

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

void printTree(vector<int> arr, int i, int j) {
    if(i>j) return;
    if(i == j) {
        cout << ". <- " << arr[i] << " -> ." << endl;
        return;
    }
    int m = (i+j+1)/2;
    int leftPtr, rightPtr;
    if(i < m && m < j) {
        leftPtr = (i + m)/2;
        rightPtr = (m+2+j)/2;
        cout << arr[leftPtr] << " <- " << arr[m] << " -> " << arr[rightPtr] << endl;
    }
    else if(i < m) {
        leftPtr = (i + m)/2;
        cout << arr[leftPtr] << " <- " << arr[m] << " -> ." << endl;
    }
    else if(m < j) {
        rightPtr = (m+2+j)/2;
        cout << ". <- " << arr[m] << " -> " << arr[rightPtr] << endl;
    }
    printTree(arr, i, m-1);
    printTree(arr, m+1, j);

}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n;
    cin >> n;
    vector<int> arr;
    int temp;
    for(int i=0; i<n; i++) {
        cin >> temp;
        arr.push_back(temp);
    }
    sort(arr.begin(), arr.end());
    printTree(arr, 0, arr.size() - 1);
    return 0;
}
