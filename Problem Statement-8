/*Problem Statement*/
Certainly! Here's a revised and clearer explanation:

In a garden with numerous apple trees labeled from 0 to n - 1, arranged in a row from left to right, the garden owner needs to collect all the apples to sell in the market. He has a basket with a capacity 'C' to collect the apples.

The process for collecting the apples is as follows:

1. Begin at the starting point, which is at x = -1.
2. Collect apples from each tree in sequential order, moving from left to right.
3. If the basket becomes full before reaching the next tree, return to the starting point (x = -1), deposit the apples collected so far, and then resume from this starting position to continue collecting apples.

The task is to determine the number of steps the garden owner will take to collect the final apple.

Input Format
0 <= n <= 105

0 <= arr[i]<= 100

max( arr[i] ) <= c

Output Format
Print the number of steps required.

Constraints
0 <= n <= 105

0 <= arr[i]<= 100

max( arr[i] ) <= c

Sample Testcase 0
Testcase Input
4 5
2 2 3 3
Testcase Output
14

Explanation
Start at the initial position with an empty basket:
- Walk to tree 0 (1 step) and collect it. Basket can has 3 apple space left.
- Walk to tree 1 (1 step) and collect it. Basket can has 1 apple space left.
- Since he cannot completely take tree 2 apples, walk back to initial position (2 steps).
- Walk to tree 2 (3 steps) and collect it. Basket  has 2 apple space left.
- Since he cannot completely take tree 3 apples. Walk back (3 steps).
- Walk to tree 3 (4 steps) and collect it.
Steps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.
Sample Testcase 1
Testcase Input
2 5
2 3
Testcase Output
2

Explanation
He has enough capacity to take all the apple from both the tree in 2 steps.
/*Ans is given Below*/
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

long long getSteps(int n, int c, vector<int>& apples)
{
  long long steps =0;
  int curr_cap =0;
  
  for(int i=0;i<n;i++)
  {
    int cal = apples[i] + curr_cap;
    if(cal <= c)
    {
      curr_cap = cal;
      steps+=1;
    }
    else{
      steps+=2*i + 1;
      curr_cap = apples[i];
    }
  }
return steps;


}

int main() {
   int n;
   int c;
   cin>>n>>c;
   vector<int> apples(n,0);
  
   for(int i=0;i<n;i++)
   { int a;
     cin>>a;
     apples[i] = a;
   }
   cout<<getSteps(n, c, apples)<<endl;
    return 0;
}
